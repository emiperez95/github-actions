name: Test Coverage Badge Action

on:
  push:
    branches: [ main ]
    paths:
      - 'coverage-badge/**'
      - '.github/workflows/test-coverage-badge.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'coverage-badge/**'
      - '.github/workflows/test-coverage-badge.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
      
      - name: Run unit tests
        run: |
          cd coverage-badge
          python -m pytest tests/ -v --cov=. --cov-report=term-missing
      
      - name: Generate test coverage report
        run: |
          cd coverage-badge
          python -m pytest tests/ --cov=. --cov-report=json
      
      - name: Extract coverage percentage for badge
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: coverage-extract
        run: |
          cd coverage-badge
          python -c "
          import json
          with open('coverage.json') as f:
              data = json.load(f)
          coverage = float(data['totals']['percent_covered_display'])
          print(f'coverage={coverage}')
          
          # Determine color
          if coverage >= 90:
              color = 'brightgreen'
          elif coverage >= 80:
              color = 'green'  
          elif coverage >= 70:
              color = 'yellowgreen'
          elif coverage >= 60:
              color = 'yellow'
          elif coverage >= 50:
              color = 'orange'
          else:
              color = 'red'
          print(f'color={color}')
          " >> $GITHUB_OUTPUT
      
      - name: Update Coverage Badge
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: coverage
          LABEL: 'Coverage'
          STATUS: '${{ steps.coverage-extract.outputs.coverage }}%'
          COLOR: ${{ steps.coverage-extract.outputs.color }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-case:
          - name: "High Coverage (90%+)"
            coverage-file: "tests/fixtures/coverage_90.json"
            expected-color: "brightgreen"
            expected-coverage: "92.5"
          - name: "Medium Coverage (50%+)"
            coverage-file: "tests/fixtures/coverage_50.json"
            expected-color: "orange"
            expected-coverage: "52.3"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Test Coverage Extraction - ${{ matrix.test-case.name }}
        id: test-extract
        working-directory: coverage-badge
        run: |
          python -c "
          import json
          with open('${{ matrix.test-case.coverage-file }}') as f:
              data = json.load(f)
          coverage = float(data['totals']['percent_covered_display'])
          print(f'coverage={coverage}')
          
          # Determine color
          if coverage >= 90:
              color = 'brightgreen'
          elif coverage >= 80:
              color = 'green'  
          elif coverage >= 70:
              color = 'yellowgreen'
          elif coverage >= 60:
              color = 'yellow'
          elif coverage >= 50:
              color = 'orange'
          else:
              color = 'red'
          print(f'color={color}')
          " >> $GITHUB_OUTPUT
      
      - name: Verify outputs
        run: |
          echo "Testing: ${{ matrix.test-case.name }}"
          echo "Coverage: ${{ steps.test-extract.outputs.coverage }}"
          echo "Color: ${{ steps.test-extract.outputs.color }}"
          
          if [[ "${{ steps.test-extract.outputs.coverage }}" != "${{ matrix.test-case.expected-coverage }}" ]]; then
            echo "ERROR: Expected coverage ${{ matrix.test-case.expected-coverage }} but got ${{ steps.test-extract.outputs.coverage }}"
            exit 1
          fi
          
          if [[ "${{ steps.test-extract.outputs.color }}" != "${{ matrix.test-case.expected-color }}" ]]; then
            echo "ERROR: Expected color ${{ matrix.test-case.expected-color }} but got ${{ steps.test-extract.outputs.color }}"
            exit 1
          fi
          
          echo "✅ Test passed!"
  
  error-handling-tests:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Test with missing file
        id: test-missing
        continue-on-error: true
        working-directory: coverage-badge
        run: |
          python coverage_badge.py nonexistent.json
      
      - name: Verify missing file error
        run: |
          if [[ "${{ steps.test-missing.outcome }}" != "failure" ]]; then
            echo "ERROR: Expected script to fail with missing file"
            exit 1
          fi
          echo "✅ Missing file error handled correctly"
      
      - name: Test with invalid JSON
        id: test-invalid
        continue-on-error: true
        working-directory: coverage-badge
        run: |
          python coverage_badge.py tests/fixtures/invalid_coverage.json
      
      - name: Verify invalid JSON error
        run: |
          if [[ "${{ steps.test-invalid.outcome }}" != "failure" ]]; then
            echo "ERROR: Expected script to fail with invalid JSON"
            exit 1
          fi
          echo "✅ Invalid JSON error handled correctly"
  
  test-with-act:
    name: Validate act compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Test Python script directly
        working-directory: coverage-badge
        run: |
          echo "Testing coverage extraction with act-compatible approach..."
          python coverage_badge.py tests/fixtures/coverage_90.json
      
      - name: Validate test success
        run: |
          echo "✅ Python script execution validated for act compatibility"